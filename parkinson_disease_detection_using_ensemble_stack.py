# -*- coding: utf-8 -*-
"""Parkinson disease detection using Ensemble Stack

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wiECfB7a7dF2Hpmcrj1meMqI9SFKrFQP
"""

import pandas as pd

import io
from google.colab import files

files = files.upload()

df = pd.read_csv(io.BytesIO(files['parkinsons.data']))

df.head()

import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from collections import Counter

from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier
from sklearn.svm import SVC

from sklearn.ensemble import StackingClassifier

seed=4

df.shape

df.info()

df.describe

print(Counter(df['status']))

df.isnull().sum()

X = df.drop(['name','status'], axis=1)
y = df['status']

X_train, X_test, y_train, y_test= train_test_split(X,y, test_size=0.2, random_state= seed)
X_train.shape



"""**Using StackingClassifier to stack all the ml models into an ensemble for better accuracy**"""



"""**Logistic Regression**"""

parameters = {'penalty': ['l1','l2'],
              'C': [0.1, 0.4, 0.8, 1, 2, 5, 10, 20, 30]}
grid_search = GridSearchCV(estimator=  LogisticRegression(), param_grid= parameters, cv=10, n_jobs = -1, verbose= 2)
grid_search.fit(X_train, y_train)
log_reg = grid_search.best_estimator_
grid_search.best_params_

y_pred = log_reg.predict(X_test)
print("\n",confusion_matrix(y_test, y_pred))
log_reg_acc = accuracy_score(y_test, y_pred)
print("\nAccuracy score {}".format(log_reg_acc))
print("Classificatin report: \n{}".format(classification_report(y_test, y_pred)))



"""**SVC**"""

from sklearn.svm import LinearSVC
svc = LinearSVC()

parameters = {
    'penalty': ['l1','l2'],
    'max_iter': [10,20,50,100,1000],
    'C': [0.1, 0.4, 0.8, 1, 2, 5, 10, 20, 30]




}
grid_search = GridSearchCV(estimator=svc, param_grid= parameters, cv=10, n_jobs= -1, verbose=2)
grid_search.fit(X_train, y_train)
svc= grid_search.best_estimator_
grid_search.best_params_

y_pred = svc.predict(X_test)
print("\n",confusion_matrix(y_test, y_pred))
svc_acc = accuracy_score(y_test, y_pred)
print("\nAccuracy score {}".format(svc_acc))
print("Classificatin report: \n{}".format(classification_report(y_test, y_pred)))



"""**XGBoost**"""

xgb = XGBClassifier()
parameters = {'min_child_weight': np.arange(0,20),
              'max_depth': [2, 4, 5, 7,9, 10]}
grid_search = GridSearchCV(estimator= xgb, param_grid= parameters, cv=10, n_jobs=-1, verbose=2)
grid_search.fit(X_train , y_train)
xgb = grid_search.best_estimator_

grid_search.best_params_

y_pred = xgb.predict(X_test)
print("\n",confusion_matrix(y_test, y_pred))
xgb_acc = accuracy_score(y_test, y_pred)
print("\nAccuracy score {}".format(xgb_acc))
print("Classificatin report: \n{}".format(classification_report(y_test, y_pred)))



"""**Stacking Ensemble Classifier**"""

estimators = [('xgb', xgb),
                ('svc', svc),
               ('log_reg', log_reg)]

stack = StackingClassifier(estimators = estimators, final_estimator= svc)
stack.fit(X_train, y_train)
stack_predicted = stack.predict(X_test)
stack_conf_matrix= confusion_matrix(y_test, stack_predicted)
stack_acc_score= accuracy_score(y_test, stack_predicted)
print("confusion matrix")
print(stack_conf_matrix)
print("\n")
print("Accuracy :", stack_acc_score*100, '\n')
print(classification_report(y_test, stack_predicted))

